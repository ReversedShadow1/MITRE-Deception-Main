version: '3.8'

services:
  neo4j:
    image: neo4j:5.18.0
    ports:
      - "7474:7474"
      - "7687:7687"
      - "2004:2004"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_default__database=pipe
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_PLUGINS=["graph-data-science", "apoc"]
      - NEO4J_dbms_security_procedures_whitelist=gds.*, apoc.*
      - NEO4J_dbms_security_procedures_unrestricted=gds.*, apoc.*
      - NEO4J_server_config_strict__validation_enabled=false
      - NEO4J_server_metrics_enabled=true
      - NEO4J_server_metrics_prometheus_enabled=true
      - NEO4J_server_metrics_prometheus_endpoint=0.0.0.0:2004
      
    volumes:
      - neo4j-data:/data
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=attack_extractor
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
  
  # Add Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alert.rules.yml:/etc/alertmanager/alert.rules.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
  
  # Add Grafana
  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus

  # Removed RabbitMQ since it's causing issues and not used in the codebase
  
  app:
    build: .
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - NEO4J_DATABASE=pipe
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=attack_extractor
      - REDIS_URL=redis://redis:6379
      - AUTO_DOWNLOAD_MODELS=false  # Set to false for faster startup
      - INITIALIZE_DATABASE=false
      - INITIALIZE_POSTGRES=true
      - INITIALIZE_TEST_USER=true  # New environment variable for creating test user
      - TEST_USER_UUID=00000000-0000-0000-0000-000000000000  # Fixed UUID for test user
      - INITIALIZE_NEO4J=false
      - ENVIRONMENT=development
      - JWT_SECRET=development_secret_key
      - TEST_API_KEY=test_api_key_for_development
      - USE_GPU=false
      - MEMORY_EFFICIENT=true
      - RELOAD=true
      - HOST=0.0.0.0
      - PORT=8000
      - METRICS_PORT=8001
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
      - ./src:/app/src  # Mount source for development
      - ./migrations:/app/migrations
    # Fixed command to use correct path
    command: >
      sh -c "
        # Wait for dependencies
        echo 'Waiting for services...' &&
        sleep 10 &&
        
        # Initialize PostgreSQL database with migrations if needed
        if [ \"$$INITIALIZE_POSTGRES\" = \"true\" ] || [ \"$$INITIALIZE_DATABASE\" = \"true\" ]; then
          echo 'Initializing PostgreSQL database with migrations...' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -d $$POSTGRES_DB -f /app/migrations/v001_base_schema.sql || echo 'v001 migration failed or already applied' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -d $$POSTGRES_DB -f /app/migrations/v002_analysis_tables.sql || echo 'v002 migration failed or already applied' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -d $$POSTGRES_DB -f /app/migrations/v003_feedback_enhancements.sql || echo 'v003 migration failed or already applied' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -d $$POSTGRES_DB -f /app/migrations/v004_detailed_metrics.sql || echo 'v004 migration failed or already applied' &&
          echo 'PostgreSQL migrations complete'
        fi &&
        
        # Create test user if needed
        if [ \"$$INITIALIZE_TEST_USER\" = \"true\" ] || [ \"$$INITIALIZE_DATABASE\" = \"true\" ]; then
          echo 'Creating test user for API testing...' &&
          PGPASSWORD=$$POSTGRES_PASSWORD psql -h $$POSTGRES_HOST -U $$POSTGRES_USER -d $$POSTGRES_DB -c \"
            -- Insert role if not exists
            INSERT INTO roles (id, name, description) 
            VALUES (1, 'user', 'Regular user role') 
            ON CONFLICT (name) DO NOTHING;

            INSERT INTO roles (id, name, description) 
            VALUES (2, 'admin', 'Priveleged user role') 
            ON CONFLICT (name) DO NOTHING;
            
            -- Insert test user with fixed UUID
            INSERT INTO users (id, username, email, password_hash, role_id, is_active) 
            VALUES ('$$TEST_USER_UUID', 'test_user', 'test@example.com', 'test_password_hash', 2, true)
            ON CONFLICT (username) DO NOTHING;
          \" &&
          echo 'Test user created or already exists'
        fi &&
        
        # Initialize Neo4j database if needed
        if [ \"$$INITIALIZE_NEO4J\" = \"true\" ] || [ \"$$INITIALIZE_DATABASE\" = \"true\" ]; then
          echo 'Initializing Neo4j database...' &&
          python -c \"from src.mitre_integration import IntegrationManager; manager = IntegrationManager('$$NEO4J_URI', '$$NEO4J_USER', '$$NEO4J_PASSWORD'); manager.run_full_update(); manager.close()\" &&
          echo 'Neo4j initialization complete'
        fi &&
        
        # Start the application
        uvicorn src.api.app:app --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped

  worker-default:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=attack_extractor
      - WORKER_TYPE=default
      - ENVIRONMENT=development
      - USE_GPU=false
      - MEMORY_EFFICIENT=true
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./src:/app/src  # Mount source for development
    restart: unless-stopped

  worker-model:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=attack_extractor
      - WORKER_TYPE=model_training
      - ENVIRONMENT=development
      - USE_GPU=false
      - MEMORY_EFFICIENT=true
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./src:/app/src  # Mount source for development
    restart: unless-stopped

# Postgres Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.10.1
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/attack_extractor?sslmode=disable
    restart: unless-stopped
    depends_on:
      - postgres

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.44.0
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: unless-stopped
    depends_on:
      - redis

volumes:
  neo4j-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
